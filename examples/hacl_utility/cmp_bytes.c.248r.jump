
;; Function main (main, funcdef_no=6, decl_uid=2962, cgraph_uid=7, symbol_order=6)

Deleted 1 trivially dead insns

5 basic blocks, 4 edges.
;; basic block 0, loop depth 0, maybe hot
;;  prev block (nil), next block 2, flags: (RTL)
;;  pred:      
;;  succ:       2 (FALLTHRU)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:SI (plus:SI (reg/f:SI 19 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 D.2971+0 S4 A32])
                (unspec:SI [
                        (mem/v/f:SI (const_int 20 [0x14]) [0 MEM[(<address-space-2> unsigned int *)20B]+0 S4 A32 AS2])
                    ] UNSPEC_SP_SET))
            (set (scratch:SI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":7:12 1158 {stack_protect_set_1_si}
     (nil))
(insn 6 3 7 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":11:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 7 6 8 2 (parallel [
            (set (reg:SI 86)
                (plus:SI (reg/f:SI 19 frame)
                    (const_int -404 [0xfffffffffffffe6c])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":11:3 209 {*addsi_1}
     (nil))
(insn 8 7 9 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 86)) "cmp_bytes.c":11:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 9 8 10 2 (set (reg:SI 3 bx)
        (reg:SI 82)) "cmp_bytes.c":11:3 75 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref:SI ("high_input_200") [flags 0x41]  <function_decl 0x7f3cc921b200 high_input_200>) [0 high_input_200 S1 A8])
        (const_int 16 [0x10])) "cmp_bytes.c":11:3 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":11:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 12 11 13 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":12:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 87)
                (plus:SI (reg/f:SI 19 frame)
                    (const_int -204 [0xffffffffffffff34])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":12:3 209 {*addsi_1}
     (nil))
(insn 14 13 15 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 87)) "cmp_bytes.c":12:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 15 14 16 2 (set (reg:SI 3 bx)
        (reg:SI 82)) "cmp_bytes.c":12:3 75 {*movsi_internal}
     (nil))
(call_insn 16 15 17 2 (call (mem:QI (symbol_ref:SI ("high_input_200") [flags 0x41]  <function_decl 0x7f3cc921b200 high_input_200>) [0 high_input_200 S1 A8])
        (const_int 16 [0x10])) "cmp_bytes.c":12:3 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":12:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":14:10 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 19 18 20 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (const_int 200 [0xc8])) "cmp_bytes.c":14:10 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 88)
                (plus:SI (reg/f:SI 19 frame)
                    (const_int -204 [0xffffffffffffff34])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":14:10 209 {*addsi_1}
     (nil))
(insn 21 20 22 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 88)) "cmp_bytes.c":14:10 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 22 21 23 2 (parallel [
            (set (reg:SI 89)
                (plus:SI (reg/f:SI 19 frame)
                    (const_int -404 [0xfffffffffffffe6c])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":14:10 209 {*addsi_1}
     (nil))
(insn 23 22 24 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 89)) "cmp_bytes.c":14:10 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 3 bx)
        (reg:SI 82)) "cmp_bytes.c":14:10 75 {*movsi_internal}
     (nil))
(call_insn 25 24 26 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("Hacl_Policies_cmp_bytes") [flags 0x41]  <function_decl 0x7f3cc92eca00 Hacl_Policies_cmp_bytes>) [0 Hacl_Policies_cmp_bytes S1 A8])
            (const_int 16 [0x10]))) "cmp_bytes.c":14:10 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 26 25 27 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":14:10 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 27 26 28 2 (set (reg:QI 83 [ _1 ])
        (reg:QI 0 ax)) "cmp_bytes.c":14:10 77 {*movqi_internal}
     (nil))
(insn 28 27 31 2 (set (reg:SI 84 [ _6 ])
        (zero_extend:SI (reg:QI 83 [ _1 ]))) "cmp_bytes.c":14:10 143 {*zero_extendqisi2}
     (nil))
(insn 31 28 35 2 (set (reg:SI 85 [ <retval> ])
        (reg:SI 84 [ _6 ])) "cmp_bytes.c":15:1 75 {*movsi_internal}
     (nil))
(insn 35 31 36 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:SI (plus:SI (reg/f:SI 19 frame)
                                (const_int -4 [0xfffffffffffffffc])) [1 D.2971+0 S4 A32])
                        (mem/v/f:SI (const_int 20 [0x14]) [0 MEM[(<address-space-2> unsigned int *)20B]+0 S4 A32 AS2])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:SI))
        ]) "cmp_bytes.c":15:1 1163 {stack_protect_test_1_si}
     (nil))
(jump_insn 36 35 43 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) "cmp_bytes.c":15:1 806 {*jcc}
     (nil)
 -> 39)
;;  succ:       4
;;              3 (FALLTHRU)

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 43 36 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 37 43 39 3 (call (mem:QI (symbol_ref:SI ("__stack_chk_fail_local") [flags 0x43]  <function_decl 0x7f3cc8ebd600 __stack_chk_fail_local>) [0 __stack_chk_fail_local S1 A8])
        (const_int 0 [0])) "cmp_bytes.c":15:1 812 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 39 37 44 4 3 (nil) [1 uses])
(note 44 39 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 44 41 4 (set (reg/i:SI 0 ax)
        (reg:SI 85 [ <retval> ])) "cmp_bytes.c":15:1 75 {*movsi_internal}
     (nil))
(insn 41 40 0 4 (use (reg/i:SI 0 ax)) "cmp_bytes.c":15:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

;; basic block 1, loop depth 0, maybe hot
;;  prev block 4, next block (nil), flags: (REACHABLE, RTL)
;;  pred:       4 [always]  (FALLTHRU)
;;  succ:      




try_optimize_cfg iteration 1

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:SI (plus:SI (reg/f:SI 19 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 D.2971+0 S4 A32])
                (unspec:SI [
                        (mem/v/f:SI (const_int 20 [0x14]) [0 MEM[(<address-space-2> unsigned int *)20B]+0 S4 A32 AS2])
                    ] UNSPEC_SP_SET))
            (set (scratch:SI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":7:12 1158 {stack_protect_set_1_si}
     (nil))
(insn 6 3 7 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":11:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 7 6 8 2 (parallel [
            (set (reg:SI 86)
                (plus:SI (reg/f:SI 19 frame)
                    (const_int -404 [0xfffffffffffffe6c])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":11:3 209 {*addsi_1}
     (nil))
(insn 8 7 9 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 86)) "cmp_bytes.c":11:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 9 8 10 2 (set (reg:SI 3 bx)
        (reg:SI 82)) "cmp_bytes.c":11:3 75 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref:SI ("high_input_200") [flags 0x41]  <function_decl 0x7f3cc921b200 high_input_200>) [0 high_input_200 S1 A8])
        (const_int 16 [0x10])) "cmp_bytes.c":11:3 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":11:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 12 11 13 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":12:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 87)
                (plus:SI (reg/f:SI 19 frame)
                    (const_int -204 [0xffffffffffffff34])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":12:3 209 {*addsi_1}
     (nil))
(insn 14 13 15 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 87)) "cmp_bytes.c":12:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 15 14 16 2 (set (reg:SI 3 bx)
        (reg:SI 82)) "cmp_bytes.c":12:3 75 {*movsi_internal}
     (nil))
(call_insn 16 15 17 2 (call (mem:QI (symbol_ref:SI ("high_input_200") [flags 0x41]  <function_decl 0x7f3cc921b200 high_input_200>) [0 high_input_200 S1 A8])
        (const_int 16 [0x10])) "cmp_bytes.c":12:3 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":12:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":14:10 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 19 18 20 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (const_int 200 [0xc8])) "cmp_bytes.c":14:10 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 88)
                (plus:SI (reg/f:SI 19 frame)
                    (const_int -204 [0xffffffffffffff34])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":14:10 209 {*addsi_1}
     (nil))
(insn 21 20 22 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 88)) "cmp_bytes.c":14:10 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 22 21 23 2 (parallel [
            (set (reg:SI 89)
                (plus:SI (reg/f:SI 19 frame)
                    (const_int -404 [0xfffffffffffffe6c])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":14:10 209 {*addsi_1}
     (nil))
(insn 23 22 24 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 89)) "cmp_bytes.c":14:10 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 24 23 25 2 (set (reg:SI 3 bx)
        (reg:SI 82)) "cmp_bytes.c":14:10 75 {*movsi_internal}
     (nil))
(call_insn 25 24 26 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("Hacl_Policies_cmp_bytes") [flags 0x41]  <function_decl 0x7f3cc92eca00 Hacl_Policies_cmp_bytes>) [0 Hacl_Policies_cmp_bytes S1 A8])
            (const_int 16 [0x10]))) "cmp_bytes.c":14:10 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 26 25 27 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "cmp_bytes.c":14:10 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 27 26 28 2 (set (reg:QI 83 [ _1 ])
        (reg:QI 0 ax)) "cmp_bytes.c":14:10 77 {*movqi_internal}
     (nil))
(insn 28 27 31 2 (set (reg:SI 84 [ _6 ])
        (zero_extend:SI (reg:QI 83 [ _1 ]))) "cmp_bytes.c":14:10 143 {*zero_extendqisi2}
     (nil))
(insn 31 28 35 2 (set (reg:SI 85 [ <retval> ])
        (reg:SI 84 [ _6 ])) "cmp_bytes.c":15:1 75 {*movsi_internal}
     (nil))
(insn 35 31 36 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:SI (plus:SI (reg/f:SI 19 frame)
                                (const_int -4 [0xfffffffffffffffc])) [1 D.2971+0 S4 A32])
                        (mem/v/f:SI (const_int 20 [0x14]) [0 MEM[(<address-space-2> unsigned int *)20B]+0 S4 A32 AS2])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:SI))
        ]) "cmp_bytes.c":15:1 1163 {stack_protect_test_1_si}
     (nil))
(jump_insn 36 35 43 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) "cmp_bytes.c":15:1 806 {*jcc}
     (nil)
 -> 39)
;;  succ:       4
;;              3 (FALLTHRU)

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 43 36 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 37 43 39 3 (call (mem:QI (symbol_ref:SI ("__stack_chk_fail_local") [flags 0x43]  <function_decl 0x7f3cc8ebd600 __stack_chk_fail_local>) [0 __stack_chk_fail_local S1 A8])
        (const_int 0 [0])) "cmp_bytes.c":15:1 812 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 39 37 44 4 3 (nil) [1 uses])
(note 44 39 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 44 41 4 (set (reg/i:SI 0 ax)
        (reg:SI 85 [ <retval> ])) "cmp_bytes.c":15:1 75 {*movsi_internal}
     (nil))
(insn 41 40 0 4 (use (reg/i:SI 0 ax)) "cmp_bytes.c":15:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

